/** 
 * @author: CharMaker by RSoft
 * 
 * This file represents the font Small5px
 * Character count:95
 * Character height:5
 * Character width (0 is variable):1
 * 
 * Rotation: 0
 * Mirrored horizontally: false
 * Mirrored vertically: false
 * 
 * First Bit: LSB */
#ifndef SMALL5PX_H_
#define SMALL5PX_H_
const uint8_t character_space[1] = {0x00};
//  
// 	.	
// 	.	
// 	.	
// 	.	
// 	.	
// 	

/*============================================*/
const uint8_t character_exclamation[1] = {0xb8};
// !
// 	#	
// 	#	
// 	#	
// 	.	
// 	#	
// 	

/*============================================*/
const uint8_t character_quotation[3] = {0x18, 0x00, 0x18};
// "
// 	#	.	#	
// 	#	.	#	
// 	.	.	.	
// 	.	.	.	
// 	.	.	.	
// 	

/*============================================*/
const uint8_t character_hash[5] = {0x50, 0xf8, 0x50, 0xf8, 0x50};
// #
// 	.	#	.	#	.	
// 	#	#	#	#	#	
// 	.	#	.	#	.	
// 	#	#	#	#	#	
// 	.	#	.	#	.	
// 	

/*============================================*/
const uint8_t character_dollar[5] = {0x90, 0xa8, 0xf8, 0xa8, 0x48};
// $
// 	.	#	#	#	#	
// 	#	.	#	.	.	
// 	.	#	#	#	.	
// 	.	.	#	.	#	
// 	#	#	#	#	.	
// 	

/*============================================*/
const uint8_t character_percent[5] = {0x98, 0x58, 0x20, 0xd0, 0xc8};
// %
// 	#	#	.	.	#	
// 	#	#	.	#	.	
// 	.	.	#	.	.	
// 	.	#	.	#	#	
// 	#	.	.	#	#	
// 	

/*============================================*/
const uint8_t character_ampersand[5] = {0x78, 0x98, 0xa0, 0x60, 0x80};
// &
// 	#	#	.	.	.	
// 	#	#	.	.	.	
// 	#	.	#	#	.	
// 	#	.	.	#	.	
// 	.	#	#	.	#	
// 	

/*============================================*/
const uint8_t character_apostrophe[1] = {0x18};
// '
// 	#	
// 	#	
// 	.	
// 	.	
// 	.	
// 	

/*============================================*/
const uint8_t character_parentheses_open[2] = {0x70, 0x88};
// (
// 	.	#	
// 	#	.	
// 	#	.	
// 	#	.	
// 	.	#	
// 	

/*============================================*/
const uint8_t character_parentheses_close[2] = {0x88, 0x70};
// )
// 	#	.	
// 	.	#	
// 	.	#	
// 	.	#	
// 	#	.	
// 	

/*============================================*/
const uint8_t character_asterisk[5] = {0xa8, 0x70, 0xf8, 0x70, 0xa8};
// *
// 	#	.	#	.	#	
// 	.	#	#	#	.	
// 	#	#	#	#	#	
// 	.	#	#	#	.	
// 	#	.	#	.	#	
// 	

/*============================================*/
const uint8_t character_plus[3] = {0x20, 0x70, 0x20};
// +
// 	.	.	.	
// 	.	#	.	
// 	#	#	#	
// 	.	#	.	
// 	.	.	.	
// 	

/*============================================*/
const uint8_t character_comma[1] = {0xc0};
// ,
// 	.	
// 	.	
// 	.	
// 	#	
// 	#	
// 	

/*============================================*/
const uint8_t character_minus[3] = {0x20, 0x20, 0x20};
// -
// 	.	.	.	
// 	.	.	.	
// 	#	#	#	
// 	.	.	.	
// 	.	.	.	
// 	

/*============================================*/
const uint8_t character_fullstop[1] = {0x80};
// .
// 	.	
// 	.	
// 	.	
// 	.	
// 	#	
// 	

/*============================================*/
const uint8_t character_slash[3] = {0xc0, 0x20, 0x18};
// /
// 	.	.	#	
// 	.	.	#	
// 	.	#	.	
// 	#	.	.	
// 	#	.	.	
// 	

/*============================================*/
const uint8_t character_zero[3] = {0xf8, 0x88, 0xf8};
// 0
// 	#	#	#	
// 	#	.	#	
// 	#	.	#	
// 	#	.	#	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_one[3] = {0x90, 0xf8, 0x80};
// 1
// 	.	#	.	
// 	#	#	.	
// 	.	#	.	
// 	.	#	.	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_two[3] = {0xe8, 0xa8, 0xb8};
// 2
// 	#	#	#	
// 	.	.	#	
// 	#	#	#	
// 	#	.	.	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_three[3] = {0x88, 0xa8, 0xf8};
// 3
// 	#	#	#	
// 	.	.	#	
// 	.	#	#	
// 	.	.	#	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_four[3] = {0x38, 0x20, 0xf0};
// 4
// 	#	.	.	
// 	#	.	#	
// 	#	#	#	
// 	.	.	#	
// 	.	.	#	
// 	

/*============================================*/
const uint8_t character_five[3] = {0xb8, 0xa8, 0xe8};
// 5
// 	#	#	#	
// 	#	.	.	
// 	#	#	#	
// 	.	.	#	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_six[3] = {0xf8, 0xa8, 0xe0};
// 6
// 	#	#	.	
// 	#	.	.	
// 	#	#	#	
// 	#	.	#	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_seven[3] = {0x08, 0xe8, 0x18};
// 7
// 	#	#	#	
// 	.	.	#	
// 	.	#	.	
// 	.	#	.	
// 	.	#	.	
// 	

/*============================================*/
const uint8_t character_eight[3] = {0xf8, 0xa8, 0xf8};
// 8
// 	#	#	#	
// 	#	.	#	
// 	#	#	#	
// 	#	.	#	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_nine[3] = {0x38, 0xa8, 0xf8};
// 9
// 	#	#	#	
// 	#	.	#	
// 	#	#	#	
// 	.	.	#	
// 	.	#	#	
// 	

/*============================================*/
const uint8_t character_colon[1] = {0x50};
// :
// 	.	
// 	#	
// 	.	
// 	#	
// 	.	
// 	

/*============================================*/
const uint8_t character_semicolon[2] = {0x80, 0x50};
// ;
// 	.	.	
// 	.	#	
// 	.	.	
// 	.	#	
// 	#	.	
// 	

/*============================================*/
const uint8_t character_less[5] = {0x20, 0x50, 0x50, 0x88, 0x88};
// <
// 	.	.	.	#	#	
// 	.	#	#	.	.	
// 	#	.	.	.	.	
// 	.	#	#	.	.	
// 	.	.	.	#	#	
// 	

/*============================================*/
const uint8_t character_equals[3] = {0x50, 0x50, 0x50};
// =
// 	.	.	.	
// 	#	#	#	
// 	.	.	.	
// 	#	#	#	
// 	.	.	.	
// 	

/*============================================*/
const uint8_t character_more[5] = {0x88, 0x88, 0x50, 0x50, 0x20};
// >
// 	#	#	.	.	.	
// 	.	.	#	#	.	
// 	.	.	.	.	#	
// 	.	.	#	#	.	
// 	#	#	.	.	.	
// 	

/*============================================*/
const uint8_t character_question[5] = {0x18, 0x08, 0xa8, 0x28, 0x38};
// ?
// 	#	#	#	#	#	
// 	#	.	.	.	#	
// 	.	.	#	#	#	
// 	.	.	.	.	.	
// 	.	.	#	.	.	
// 	

/*============================================*/
const uint8_t character_at[6] = {0x70, 0x88, 0xe8, 0xe8, 0x90, 0x40};
// @
// 	.	#	#	#	.	.	
// 	#	.	.	.	#	.	
// 	#	.	#	#	.	.	
// 	#	.	#	#	.	#	
// 	.	#	#	#	#	.	
// 	

/*============================================*/
const uint8_t character_A[4] = {0xf0, 0x28, 0x28, 0xf0};
// A
// 	.	#	#	.	
// 	#	.	.	#	
// 	#	#	#	#	
// 	#	.	.	#	
// 	#	.	.	#	
// 	

/*============================================*/
const uint8_t character_B[4] = {0xf8, 0xa8, 0xa8, 0x50};
// B
// 	#	#	#	.	
// 	#	.	.	#	
// 	#	#	#	.	
// 	#	.	.	#	
// 	#	#	#	.	
// 	

/*============================================*/
const uint8_t character_C[4] = {0x70, 0x88, 0x88, 0x88};
// C
// 	.	#	#	#	
// 	#	.	.	.	
// 	#	.	.	.	
// 	#	.	.	.	
// 	.	#	#	#	
// 	

/*============================================*/
const uint8_t character_D[4] = {0xf8, 0x88, 0x88, 0x70};
// D
// 	#	#	#	.	
// 	#	.	.	#	
// 	#	.	.	#	
// 	#	.	.	#	
// 	#	#	#	.	
// 	

/*============================================*/
const uint8_t character_E[4] = {0xf8, 0xa8, 0xa8, 0x88};
// E
// 	#	#	#	#	
// 	#	.	.	.	
// 	#	#	#	.	
// 	#	.	.	.	
// 	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_F[4] = {0xf8, 0x28, 0x28, 0x08};
// F
// 	#	#	#	#	
// 	#	.	.	.	
// 	#	#	#	.	
// 	#	.	.	.	
// 	#	.	.	.	
// 	

/*============================================*/
const uint8_t character_G[4] = {0x70, 0x88, 0xa8, 0xe8};
// G
// 	.	#	#	#	
// 	#	.	.	.	
// 	#	.	#	#	
// 	#	.	.	#	
// 	.	#	#	#	
// 	

/*============================================*/
const uint8_t character_H[4] = {0xf8, 0x20, 0x20, 0xf8};
// H
// 	#	.	.	#	
// 	#	.	.	#	
// 	#	#	#	#	
// 	#	.	.	#	
// 	#	.	.	#	
// 	

/*============================================*/
const uint8_t character_I[3] = {0x88, 0xf8, 0x88};
// I
// 	#	#	#	
// 	.	#	.	
// 	.	#	.	
// 	.	#	.	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_J[4] = {0x48, 0x88, 0x88, 0x78};
// J
// 	#	#	#	#	
// 	.	.	.	#	
// 	.	.	.	#	
// 	#	.	.	#	
// 	.	#	#	.	
// 	

/*============================================*/
const uint8_t character_K[4] = {0xf8, 0x20, 0x50, 0x88};
// K
// 	#	.	.	#	
// 	#	.	#	.	
// 	#	#	.	.	
// 	#	.	#	.	
// 	#	.	.	#	
// 	

/*============================================*/
const uint8_t character_L[4] = {0xf8, 0x80, 0x80, 0x80};
// L
// 	#	.	.	.	
// 	#	.	.	.	
// 	#	.	.	.	
// 	#	.	.	.	
// 	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_M[5] = {0xf8, 0x10, 0x20, 0x10, 0xf8};
// M
// 	#	.	.	.	#	
// 	#	#	.	#	#	
// 	#	.	#	.	#	
// 	#	.	.	.	#	
// 	#	.	.	.	#	
// 	

/*============================================*/
const uint8_t character_N[5] = {0xf8, 0x10, 0x20, 0x40, 0xf8};
// N
// 	#	.	.	.	#	
// 	#	#	.	.	#	
// 	#	.	#	.	#	
// 	#	.	.	#	#	
// 	#	.	.	.	#	
// 	

/*============================================*/
const uint8_t character_O[4] = {0x70, 0x88, 0x88, 0x70};
// O
// 	.	#	#	.	
// 	#	.	.	#	
// 	#	.	.	#	
// 	#	.	.	#	
// 	.	#	#	.	
// 	

/*============================================*/
const uint8_t character_P[4] = {0xf8, 0x28, 0x28, 0x10};
// P
// 	#	#	#	.	
// 	#	.	.	#	
// 	#	#	#	.	
// 	#	.	.	.	
// 	#	.	.	.	
// 	

/*============================================*/
const uint8_t character_Q[5] = {0x70, 0x88, 0xc8, 0xf0, 0x80};
// Q
// 	.	#	#	.	.	
// 	#	.	.	#	.	
// 	#	.	.	#	.	
// 	#	.	#	#	.	
// 	.	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_R[4] = {0xf8, 0x28, 0x68, 0x90};
// R
// 	#	#	#	.	
// 	#	.	.	#	
// 	#	#	#	.	
// 	#	.	#	.	
// 	#	.	.	#	
// 	

/*============================================*/
const uint8_t character_S[4] = {0x90, 0xa8, 0xa8, 0x48};
// S
// 	.	#	#	#	
// 	#	.	.	.	
// 	.	#	#	.	
// 	.	.	.	#	
// 	#	#	#	.	
// 	

/*============================================*/
const uint8_t character_T[5] = {0x08, 0x08, 0xf8, 0x08, 0x08};
// T
// 	#	#	#	#	#	
// 	.	.	#	.	.	
// 	.	.	#	.	.	
// 	.	.	#	.	.	
// 	.	.	#	.	.	
// 	

/*============================================*/
const uint8_t character_U[4] = {0x78, 0x80, 0x80, 0x78};
// U
// 	#	.	.	#	
// 	#	.	.	#	
// 	#	.	.	#	
// 	#	.	.	#	
// 	.	#	#	.	
// 	

/*============================================*/
const uint8_t character_V[5] = {0x38, 0x40, 0x80, 0x40, 0x38};
// V
// 	#	.	.	.	#	
// 	#	.	.	.	#	
// 	#	.	.	.	#	
// 	.	#	.	#	.	
// 	.	.	#	.	.	
// 	

/*============================================*/
const uint8_t character_W[5] = {0x78, 0x80, 0x60, 0x80, 0x78};
// W
// 	#	.	.	.	#	
// 	#	.	.	.	#	
// 	#	.	#	.	#	
// 	#	.	#	.	#	
// 	.	#	.	#	.	
// 	

/*============================================*/
const uint8_t character_X[5] = {0x88, 0x50, 0x20, 0x50, 0x88};
// X
// 	#	.	.	.	#	
// 	.	#	.	#	.	
// 	.	.	#	.	.	
// 	.	#	.	#	.	
// 	#	.	.	.	#	
// 	

/*============================================*/
const uint8_t character_Y[5] = {0x08, 0x10, 0xe0, 0x10, 0x08};
// Y
// 	#	.	.	.	#	
// 	.	#	.	#	.	
// 	.	.	#	.	.	
// 	.	.	#	.	.	
// 	.	.	#	.	.	
// 	

/*============================================*/
const uint8_t character_Z[5] = {0x88, 0xc8, 0xa8, 0x98, 0x88};
// Z
// 	#	#	#	#	#	
// 	.	.	.	#	.	
// 	.	.	#	.	.	
// 	.	#	.	.	.	
// 	#	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_square_bracket_open[2] = {0xf8, 0x88};
// [
// 	#	#	
// 	#	.	
// 	#	.	
// 	#	.	
// 	#	#	
// 	

/*============================================*/
const uint8_t character_backslash[3] = {0x18, 0x20, 0xc0};
// \
// 	#	.	.	
// 	#	.	.	
// 	.	#	.	
// 	.	.	#	
// 	.	.	#	
// 	

/*============================================*/
const uint8_t character_square_bracket_close[2] = {0x88, 0xf8};
// ]
// 	#	#	
// 	.	#	
// 	.	#	
// 	.	#	
// 	#	#	
// 	

/*============================================*/
const uint8_t character_caret[5] = {0x20, 0x10, 0x08, 0x10, 0x20};
// ^
// 	.	.	#	.	.	
// 	.	#	.	#	.	
// 	#	.	.	.	#	
// 	.	.	.	.	.	
// 	.	.	.	.	.	
// 	

/*============================================*/
const uint8_t character_underscore[4] = {0x80, 0x80, 0x80, 0x80};
// _
// 	.	.	.	.	
// 	.	.	.	.	
// 	.	.	.	.	
// 	.	.	.	.	
// 	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_grave[2] = {0x08, 0x10};
// `
// 	#	.	
// 	.	#	
// 	.	.	
// 	.	.	
// 	.	.	
// 	

/*============================================*/
const uint8_t character_a[4] = {0xe0, 0xa0, 0xe0, 0x80};
// a
// 	.	.	.	.	
// 	.	.	.	.	
// 	#	#	#	.	
// 	#	.	#	.	
// 	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_b[4] = {0xf8, 0xa0, 0xa0, 0x40};
// b
// 	#	.	.	.	
// 	#	.	.	.	
// 	#	#	#	.	
// 	#	.	.	#	
// 	#	#	#	.	
// 	

/*============================================*/
const uint8_t character_c[3] = {0x40, 0xa0, 0xa0};
// c
// 	.	.	.	
// 	.	.	.	
// 	.	#	#	
// 	#	.	.	
// 	.	#	#	
// 	

/*============================================*/
const uint8_t character_d[4] = {0x40, 0xa0, 0xa0, 0xf8};
// d
// 	.	.	.	#	
// 	.	.	.	#	
// 	.	#	#	#	
// 	#	.	.	#	
// 	.	#	#	#	
// 	

/*============================================*/
const uint8_t character_e[4] = {0x60, 0xb0, 0xb0, 0xb0};
// e
// 	.	.	.	.	
// 	.	#	#	#	
// 	#	#	#	#	
// 	#	.	.	.	
// 	.	#	#	#	
// 	

/*============================================*/
const uint8_t character_f[4] = {0x40, 0xf0, 0x48, 0x10};
// f
// 	.	.	#	.	
// 	.	#	.	#	
// 	.	#	.	.	
// 	#	#	#	.	
// 	.	#	.	.	
// 	

/*============================================*/
const uint8_t character_g[4] = {0x90, 0xa8, 0xa8, 0xf0};
// g
// 	.	#	#	.	
// 	#	.	.	#	
// 	.	#	#	#	
// 	.	.	.	#	
// 	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_h[4] = {0xf8, 0x20, 0x20, 0xc0};
// h
// 	#	.	.	.	
// 	#	.	.	.	
// 	#	#	#	.	
// 	#	.	.	#	
// 	#	.	.	#	
// 	

/*============================================*/
const uint8_t character_i[1] = {0xe8};
// i
// 	#	
// 	.	
// 	#	
// 	#	
// 	#	
// 	

/*============================================*/
const uint8_t character_j[2] = {0x80, 0x68};
// j
// 	.	#	
// 	.	.	
// 	.	#	
// 	.	#	
// 	#	.	
// 	

/*============================================*/
const uint8_t character_k[3] = {0xf8, 0x40, 0xa0};
// k
// 	#	.	.	
// 	#	.	.	
// 	#	.	#	
// 	#	#	.	
// 	#	.	#	
// 	

/*============================================*/
const uint8_t character_l[3] = {0x78, 0x80, 0x40};
// l
// 	#	.	.	
// 	#	.	.	
// 	#	.	.	
// 	#	.	#	
// 	.	#	.	
// 	

/*============================================*/
const uint8_t character_m[5] = {0xe0, 0x20, 0xc0, 0x20, 0xc0};
// m
// 	.	.	.	.	.	
// 	.	.	.	.	.	
// 	#	#	.	#	.	
// 	#	.	#	.	#	
// 	#	.	#	.	#	
// 	

/*============================================*/
const uint8_t character_n[3] = {0xe0, 0x20, 0xc0};
// n
// 	.	.	.	
// 	.	.	.	
// 	#	#	.	
// 	#	.	#	
// 	#	.	#	
// 	

/*============================================*/
const uint8_t character_o[4] = {0x40, 0xa0, 0xa0, 0x40};
// o
// 	.	.	.	.	
// 	.	.	.	.	
// 	.	#	#	.	
// 	#	.	.	#	
// 	.	#	#	.	
// 	

/*============================================*/
const uint8_t character_p[4] = {0xe0, 0x50, 0x50, 0x20};
// p
// 	.	.	.	.	
// 	.	#	#	.	
// 	#	.	.	#	
// 	#	#	#	.	
// 	#	.	.	.	
// 	

/*============================================*/
const uint8_t character_q[4] = {0x20, 0x50, 0x50, 0xe0};
// q
// 	.	.	.	.	
// 	.	#	#	.	
// 	#	.	.	#	
// 	.	#	#	#	
// 	.	.	.	#	
// 	

/*============================================*/
const uint8_t character_r[3] = {0xe0, 0x20, 0x20};
// r
// 	.	.	.	
// 	.	.	.	
// 	#	#	#	
// 	#	.	.	
// 	#	.	.	
// 	

/*============================================*/
const uint8_t character_s[3] = {0x90, 0xa8, 0x48};
// s
// 	.	#	#	
// 	#	.	.	
// 	.	#	.	
// 	.	.	#	
// 	#	#	.	
// 	

/*============================================*/
const uint8_t character_t[3] = {0x20, 0x78, 0xa0};
// t
// 	.	#	.	
// 	.	#	.	
// 	#	#	#	
// 	.	#	.	
// 	.	.	#	
// 	

/*============================================*/
const uint8_t character_u[3] = {0x60, 0x80, 0xe0};
// u
// 	.	.	.	
// 	.	.	.	
// 	#	.	#	
// 	#	.	#	
// 	.	#	#	
// 	

/*============================================*/
const uint8_t character_v[3] = {0x60, 0x80, 0x60};
// v
// 	.	.	.	
// 	.	.	.	
// 	#	.	#	
// 	#	.	#	
// 	.	#	.	
// 	

/*============================================*/
const uint8_t character_w[5] = {0x60, 0x80, 0x40, 0x80, 0x60};
// w
// 	.	.	.	.	.	
// 	.	.	.	.	.	
// 	#	.	.	.	#	
// 	#	.	#	.	#	
// 	.	#	.	#	.	
// 	

/*============================================*/
const uint8_t character_x[3] = {0xa0, 0x40, 0xa0};
// x
// 	.	.	.	
// 	.	.	.	
// 	#	.	#	
// 	.	#	.	
// 	#	.	#	
// 	

/*============================================*/
const uint8_t character_y[3] = {0x30, 0xc0, 0x30};
// y
// 	.	.	.	
// 	#	.	#	
// 	#	.	#	
// 	.	#	.	
// 	.	#	.	
// 	

/*============================================*/
const uint8_t character_z[4] = {0xd0, 0xd0, 0xb0, 0xb0};
// z
// 	.	.	.	.	
// 	#	#	#	#	
// 	.	.	#	#	
// 	#	#	.	.	
// 	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_bracket_open[3] = {0x20, 0x70, 0x88};
// {
// 	.	.	#	
// 	.	#	.	
// 	#	#	.	
// 	.	#	.	
// 	.	.	#	
// 	

/*============================================*/
const uint8_t character_vertical_bar[1] = {0xd8};
// |
// 	#	
// 	#	
// 	.	
// 	#	
// 	#	
// 	

/*============================================*/
const uint8_t character_bracket_close[3] = {0x88, 0x70, 0x20};
// }
// 	#	.	.	
// 	.	#	.	
// 	.	#	#	
// 	.	#	.	
// 	#	.	.	
// 	

/*============================================*/
const uint8_t character_tilde[4] = {0x20, 0x10, 0x20, 0x10};
// ~
// 	.	.	.	.	
// 	.	#	.	#	
// 	#	.	#	.	
// 	.	.	.	.	
// 	.	.	.	.	
// 	

/*============================================*/

const uint8_t Small5px_width[95] = {
	1,
	1,
	3,
	5,
	5,
	5,
	5,
	1,
	2,
	2,
	5,
	3,
	1,
	3,
	1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	1,
	2,
	5,
	3,
	5,
	5,
	6,
	4,
	4,
	4,
	4,
	4,
	4,
	4,
	4,
	3,
	4,
	4,
	4,
	5,
	5,
	4,
	4,
	5,
	4,
	4,
	5,
	4,
	5,
	5,
	5,
	5,
	5,
	2,
	3,
	2,
	5,
	4,
	2,
	4,
	4,
	3,
	4,
	4,
	4,
	4,
	4,
	1,
	2,
	3,
	3,
	5,
	3,
	4,
	4,
	4,
	3,
	3,
	3,
	3,
	3,
	5,
	3,
	3,
	4,
	3,
	1,
	3,
	4
};

const uint8_t* const Small5px[95] = {
	character_space,
	character_exclamation,
	character_quotation,
	character_hash,
	character_dollar,
	character_percent,
	character_ampersand,
	character_apostrophe,
	character_parentheses_open,
	character_parentheses_close,
	character_asterisk,
	character_plus,
	character_comma,
	character_minus,
	character_fullstop,
	character_slash,
	character_zero,
	character_one,
	character_two,
	character_three,
	character_four,
	character_five,
	character_six,
	character_seven,
	character_eight,
	character_nine,
	character_colon,
	character_semicolon,
	character_less,
	character_equals,
	character_more,
	character_question,
	character_at,
	character_A,
	character_B,
	character_C,
	character_D,
	character_E,
	character_F,
	character_G,
	character_H,
	character_I,
	character_J,
	character_K,
	character_L,
	character_M,
	character_N,
	character_O,
	character_P,
	character_Q,
	character_R,
	character_S,
	character_T,
	character_U,
	character_V,
	character_W,
	character_X,
	character_Y,
	character_Z,
	character_square_bracket_open,
	character_backslash,
	character_square_bracket_close,
	character_caret,
	character_underscore,
	character_grave,
	character_a,
	character_b,
	character_c,
	character_d,
	character_e,
	character_f,
	character_g,
	character_h,
	character_i,
	character_j,
	character_k,
	character_l,
	character_m,
	character_n,
	character_o,
	character_p,
	character_q,
	character_r,
	character_s,
	character_t,
	character_u,
	character_v,
	character_w,
	character_x,
	character_y,
	character_z,
	character_bracket_open,
	character_vertical_bar,
	character_bracket_close,
	character_tilde
};
#endif /** SMALL5PX_H_ */

