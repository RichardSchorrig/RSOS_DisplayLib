/** 
 * @author: CharMaker by RSoft
 * 
 * This file represents the font small5px
 * Character count:95
 * Character height:5
 * Character width (0 is variable):0
 * 
 * Rotation: 0
 * Mirrored horizontally: false
 * Mirrored vertically: false
 * 
 * First Bit: LSB */
#ifndef SMALL5PX_TOPALLIGNED_H_
#define SMALL5PX_TOPALLIGNED_H_
const uint8_t character_space[1] = {0x00};
//  
// 	.	
// 	.	
// 	.	
// 	.	
// 	.	
// 	

/*============================================*/
const uint8_t character_exclamation[1] = {0x17};
// !
// 	#	
// 	#	
// 	#	
// 	.	
// 	#	
// 	

/*============================================*/
const uint8_t character_quotation[3] = {0x03, 0x00, 0x03};
// "
// 	#	.	#	
// 	#	.	#	
// 	.	.	.	
// 	.	.	.	
// 	.	.	.	
// 	

/*============================================*/
const uint8_t character_hash[5] = {0x0a, 0x1f, 0x0a, 0x1f, 0x0a};
// #
// 	.	#	.	#	.	
// 	#	#	#	#	#	
// 	.	#	.	#	.	
// 	#	#	#	#	#	
// 	.	#	.	#	.	
// 	

/*============================================*/
const uint8_t character_dollar[5] = {0x12, 0x15, 0x1f, 0x15, 0x09};
// $
// 	.	#	#	#	#	
// 	#	.	#	.	.	
// 	.	#	#	#	.	
// 	.	.	#	.	#	
// 	#	#	#	#	.	
// 	

/*============================================*/
const uint8_t character_percent[5] = {0x13, 0x0b, 0x04, 0x1a, 0x19};
// %
// 	#	#	.	.	#	
// 	#	#	.	#	.	
// 	.	.	#	.	.	
// 	.	#	.	#	#	
// 	#	.	.	#	#	
// 	

/*============================================*/
const uint8_t character_ampersand[5] = {0x0f, 0x13, 0x14, 0x0c, 0x10};
// &
// 	#	#	.	.	.	
// 	#	#	.	.	.	
// 	#	.	#	#	.	
// 	#	.	.	#	.	
// 	.	#	#	.	#	
// 	

/*============================================*/
const uint8_t character_apostrophe[1] = {0x03};
// '
// 	#	
// 	#	
// 	.	
// 	.	
// 	.	
// 	

/*============================================*/
const uint8_t character_parentheses_open[2] = {0x0e, 0x11};
// (
// 	.	#	
// 	#	.	
// 	#	.	
// 	#	.	
// 	.	#	
// 	

/*============================================*/
const uint8_t character_parentheses_close[2] = {0x11, 0x0e};
// )
// 	#	.	
// 	.	#	
// 	.	#	
// 	.	#	
// 	#	.	
// 	

/*============================================*/
const uint8_t character_asterisk[5] = {0x15, 0x0e, 0x1f, 0x0e, 0x15};
// *
// 	#	.	#	.	#	
// 	.	#	#	#	.	
// 	#	#	#	#	#	
// 	.	#	#	#	.	
// 	#	.	#	.	#	
// 	

/*============================================*/
const uint8_t character_plus[3] = {0x04, 0x0e, 0x04};
// +
// 	.	.	.	
// 	.	#	.	
// 	#	#	#	
// 	.	#	.	
// 	.	.	.	
// 	

/*============================================*/
const uint8_t character_comma[1] = {0x18};
// ,
// 	.	
// 	.	
// 	.	
// 	#	
// 	#	
// 	

/*============================================*/
const uint8_t character_minus[3] = {0x04, 0x04, 0x04};
// -
// 	.	.	.	
// 	.	.	.	
// 	#	#	#	
// 	.	.	.	
// 	.	.	.	
// 	

/*============================================*/
const uint8_t character_fullstop[1] = {0x10};
// .
// 	.	
// 	.	
// 	.	
// 	.	
// 	#	
// 	

/*============================================*/
const uint8_t character_slash[3] = {0x18, 0x04, 0x03};
// /
// 	.	.	#	
// 	.	.	#	
// 	.	#	.	
// 	#	.	.	
// 	#	.	.	
// 	

/*============================================*/
const uint8_t character_zero[3] = {0x1f, 0x11, 0x1f};
// 0
// 	#	#	#	
// 	#	.	#	
// 	#	.	#	
// 	#	.	#	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_one[3] = {0x12, 0x1f, 0x10};
// 1
// 	.	#	.	
// 	#	#	.	
// 	.	#	.	
// 	.	#	.	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_two[3] = {0x1d, 0x15, 0x17};
// 2
// 	#	#	#	
// 	.	.	#	
// 	#	#	#	
// 	#	.	.	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_three[3] = {0x11, 0x15, 0x1f};
// 3
// 	#	#	#	
// 	.	.	#	
// 	.	#	#	
// 	.	.	#	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_four[3] = {0x07, 0x04, 0x1e};
// 4
// 	#	.	.	
// 	#	.	#	
// 	#	#	#	
// 	.	.	#	
// 	.	.	#	
// 	

/*============================================*/
const uint8_t character_five[3] = {0x17, 0x15, 0x1d};
// 5
// 	#	#	#	
// 	#	.	.	
// 	#	#	#	
// 	.	.	#	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_six[3] = {0x1f, 0x15, 0x1c};
// 6
// 	#	#	.	
// 	#	.	.	
// 	#	#	#	
// 	#	.	#	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_seven[3] = {0x01, 0x1d, 0x03};
// 7
// 	#	#	#	
// 	.	.	#	
// 	.	#	.	
// 	.	#	.	
// 	.	#	.	
// 	

/*============================================*/
const uint8_t character_eight[3] = {0x1f, 0x15, 0x1f};
// 8
// 	#	#	#	
// 	#	.	#	
// 	#	#	#	
// 	#	.	#	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_nine[3] = {0x07, 0x15, 0x1f};
// 9
// 	#	#	#	
// 	#	.	#	
// 	#	#	#	
// 	.	.	#	
// 	.	#	#	
// 	

/*============================================*/
const uint8_t character_colon[1] = {0x0a};
// :
// 	.	
// 	#	
// 	.	
// 	#	
// 	.	
// 	

/*============================================*/
const uint8_t character_semicolon[2] = {0x10, 0x0a};
// ;
// 	.	.	
// 	.	#	
// 	.	.	
// 	.	#	
// 	#	.	
// 	

/*============================================*/
const uint8_t character_less[5] = {0x04, 0x0a, 0x0a, 0x11, 0x11};
// <
// 	.	.	.	#	#	
// 	.	#	#	.	.	
// 	#	.	.	.	.	
// 	.	#	#	.	.	
// 	.	.	.	#	#	
// 	

/*============================================*/
const uint8_t character_equals[3] = {0x0a, 0x0a, 0x0a};
// =
// 	.	.	.	
// 	#	#	#	
// 	.	.	.	
// 	#	#	#	
// 	.	.	.	
// 	

/*============================================*/
const uint8_t character_more[5] = {0x11, 0x11, 0x0a, 0x0a, 0x04};
// >
// 	#	#	.	.	.	
// 	.	.	#	#	.	
// 	.	.	.	.	#	
// 	.	.	#	#	.	
// 	#	#	.	.	.	
// 	

/*============================================*/
const uint8_t character_question[5] = {0x03, 0x01, 0x15, 0x05, 0x07};
// ?
// 	#	#	#	#	#	
// 	#	.	.	.	#	
// 	.	.	#	#	#	
// 	.	.	.	.	.	
// 	.	.	#	.	.	
// 	

/*============================================*/
const uint8_t character_at[6] = {0x0e, 0x11, 0x1d, 0x1d, 0x12, 0x08};
// @
// 	.	#	#	#	.	.	
// 	#	.	.	.	#	.	
// 	#	.	#	#	.	.	
// 	#	.	#	#	.	#	
// 	.	#	#	#	#	.	
// 	

/*============================================*/
const uint8_t character_A[4] = {0x1e, 0x05, 0x05, 0x1e};
// A
// 	.	#	#	.	
// 	#	.	.	#	
// 	#	#	#	#	
// 	#	.	.	#	
// 	#	.	.	#	
// 	

/*============================================*/
const uint8_t character_B[4] = {0x1f, 0x15, 0x15, 0x0a};
// B
// 	#	#	#	.	
// 	#	.	.	#	
// 	#	#	#	.	
// 	#	.	.	#	
// 	#	#	#	.	
// 	

/*============================================*/
const uint8_t character_C[4] = {0x0e, 0x11, 0x11, 0x11};
// C
// 	.	#	#	#	
// 	#	.	.	.	
// 	#	.	.	.	
// 	#	.	.	.	
// 	.	#	#	#	
// 	

/*============================================*/
const uint8_t character_D[4] = {0x1f, 0x11, 0x11, 0x0e};
// D
// 	#	#	#	.	
// 	#	.	.	#	
// 	#	.	.	#	
// 	#	.	.	#	
// 	#	#	#	.	
// 	

/*============================================*/
const uint8_t character_E[4] = {0x1f, 0x15, 0x15, 0x11};
// E
// 	#	#	#	#	
// 	#	.	.	.	
// 	#	#	#	.	
// 	#	.	.	.	
// 	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_F[4] = {0x1f, 0x05, 0x05, 0x01};
// F
// 	#	#	#	#	
// 	#	.	.	.	
// 	#	#	#	.	
// 	#	.	.	.	
// 	#	.	.	.	
// 	

/*============================================*/
const uint8_t character_G[4] = {0x0e, 0x11, 0x15, 0x1d};
// G
// 	.	#	#	#	
// 	#	.	.	.	
// 	#	.	#	#	
// 	#	.	.	#	
// 	.	#	#	#	
// 	

/*============================================*/
const uint8_t character_H[4] = {0x1f, 0x04, 0x04, 0x1f};
// H
// 	#	.	.	#	
// 	#	.	.	#	
// 	#	#	#	#	
// 	#	.	.	#	
// 	#	.	.	#	
// 	

/*============================================*/
const uint8_t character_I[3] = {0x11, 0x1f, 0x11};
// I
// 	#	#	#	
// 	.	#	.	
// 	.	#	.	
// 	.	#	.	
// 	#	#	#	
// 	

/*============================================*/
const uint8_t character_J[4] = {0x09, 0x11, 0x11, 0x0f};
// J
// 	#	#	#	#	
// 	.	.	.	#	
// 	.	.	.	#	
// 	#	.	.	#	
// 	.	#	#	.	
// 	

/*============================================*/
const uint8_t character_K[4] = {0x1f, 0x04, 0x0a, 0x11};
// K
// 	#	.	.	#	
// 	#	.	#	.	
// 	#	#	.	.	
// 	#	.	#	.	
// 	#	.	.	#	
// 	

/*============================================*/
const uint8_t character_L[4] = {0x1f, 0x10, 0x10, 0x10};
// L
// 	#	.	.	.	
// 	#	.	.	.	
// 	#	.	.	.	
// 	#	.	.	.	
// 	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_M[5] = {0x1f, 0x02, 0x04, 0x02, 0x1f};
// M
// 	#	.	.	.	#	
// 	#	#	.	#	#	
// 	#	.	#	.	#	
// 	#	.	.	.	#	
// 	#	.	.	.	#	
// 	

/*============================================*/
const uint8_t character_N[5] = {0x1f, 0x02, 0x04, 0x08, 0x1f};
// N
// 	#	.	.	.	#	
// 	#	#	.	.	#	
// 	#	.	#	.	#	
// 	#	.	.	#	#	
// 	#	.	.	.	#	
// 	

/*============================================*/
const uint8_t character_O[4] = {0x0e, 0x11, 0x11, 0x0e};
// O
// 	.	#	#	.	
// 	#	.	.	#	
// 	#	.	.	#	
// 	#	.	.	#	
// 	.	#	#	.	
// 	

/*============================================*/
const uint8_t character_P[4] = {0x1f, 0x05, 0x05, 0x02};
// P
// 	#	#	#	.	
// 	#	.	.	#	
// 	#	#	#	.	
// 	#	.	.	.	
// 	#	.	.	.	
// 	

/*============================================*/
const uint8_t character_Q[5] = {0x0e, 0x11, 0x19, 0x1e, 0x10};
// Q
// 	.	#	#	.	.	
// 	#	.	.	#	.	
// 	#	.	.	#	.	
// 	#	.	#	#	.	
// 	.	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_R[4] = {0x1f, 0x05, 0x0d, 0x12};
// R
// 	#	#	#	.	
// 	#	.	.	#	
// 	#	#	#	.	
// 	#	.	#	.	
// 	#	.	.	#	
// 	

/*============================================*/
const uint8_t character_S[4] = {0x12, 0x15, 0x15, 0x09};
// S
// 	.	#	#	#	
// 	#	.	.	.	
// 	.	#	#	.	
// 	.	.	.	#	
// 	#	#	#	.	
// 	

/*============================================*/
const uint8_t character_T[5] = {0x01, 0x01, 0x1f, 0x01, 0x01};
// T
// 	#	#	#	#	#	
// 	.	.	#	.	.	
// 	.	.	#	.	.	
// 	.	.	#	.	.	
// 	.	.	#	.	.	
// 	

/*============================================*/
const uint8_t character_U[4] = {0x0f, 0x10, 0x10, 0x0f};
// U
// 	#	.	.	#	
// 	#	.	.	#	
// 	#	.	.	#	
// 	#	.	.	#	
// 	.	#	#	.	
// 	

/*============================================*/
const uint8_t character_V[5] = {0x07, 0x08, 0x10, 0x08, 0x07};
// V
// 	#	.	.	.	#	
// 	#	.	.	.	#	
// 	#	.	.	.	#	
// 	.	#	.	#	.	
// 	.	.	#	.	.	
// 	

/*============================================*/
const uint8_t character_W[5] = {0x0f, 0x10, 0x0c, 0x10, 0x0f};
// W
// 	#	.	.	.	#	
// 	#	.	.	.	#	
// 	#	.	#	.	#	
// 	#	.	#	.	#	
// 	.	#	.	#	.	
// 	

/*============================================*/
const uint8_t character_X[5] = {0x11, 0x0a, 0x04, 0x0a, 0x11};
// X
// 	#	.	.	.	#	
// 	.	#	.	#	.	
// 	.	.	#	.	.	
// 	.	#	.	#	.	
// 	#	.	.	.	#	
// 	

/*============================================*/
const uint8_t character_Y[5] = {0x01, 0x02, 0x1c, 0x02, 0x01};
// Y
// 	#	.	.	.	#	
// 	.	#	.	#	.	
// 	.	.	#	.	.	
// 	.	.	#	.	.	
// 	.	.	#	.	.	
// 	

/*============================================*/
const uint8_t character_Z[5] = {0x11, 0x19, 0x15, 0x13, 0x11};
// Z
// 	#	#	#	#	#	
// 	.	.	.	#	.	
// 	.	.	#	.	.	
// 	.	#	.	.	.	
// 	#	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_square_bracket_open[2] = {0x1f, 0x11};
// [
// 	#	#	
// 	#	.	
// 	#	.	
// 	#	.	
// 	#	#	
// 	

/*============================================*/
const uint8_t character_backslash[3] = {0x03, 0x04, 0x18};
// \
// 	#	.	.	
// 	#	.	.	
// 	.	#	.	
// 	.	.	#	
// 	.	.	#	
// 	

/*============================================*/
const uint8_t character_square_bracket_close[2] = {0x11, 0x1f};
// ]
// 	#	#	
// 	.	#	
// 	.	#	
// 	.	#	
// 	#	#	
// 	

/*============================================*/
const uint8_t character_caret[5] = {0x04, 0x02, 0x01, 0x02, 0x04};
// ^
// 	.	.	#	.	.	
// 	.	#	.	#	.	
// 	#	.	.	.	#	
// 	.	.	.	.	.	
// 	.	.	.	.	.	
// 	

/*============================================*/
const uint8_t character_underscore[4] = {0x10, 0x10, 0x10, 0x10};
// _
// 	.	.	.	.	
// 	.	.	.	.	
// 	.	.	.	.	
// 	.	.	.	.	
// 	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_grave[2] = {0x01, 0x02};
// `
// 	#	.	
// 	.	#	
// 	.	.	
// 	.	.	
// 	.	.	
// 	

/*============================================*/
const uint8_t character_a[4] = {0x1c, 0x14, 0x1c, 0x10};
// a
// 	.	.	.	.	
// 	.	.	.	.	
// 	#	#	#	.	
// 	#	.	#	.	
// 	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_b[4] = {0x1f, 0x14, 0x14, 0x08};
// b
// 	#	.	.	.	
// 	#	.	.	.	
// 	#	#	#	.	
// 	#	.	.	#	
// 	#	#	#	.	
// 	

/*============================================*/
const uint8_t character_c[3] = {0x08, 0x14, 0x14};
// c
// 	.	.	.	
// 	.	.	.	
// 	.	#	#	
// 	#	.	.	
// 	.	#	#	
// 	

/*============================================*/
const uint8_t character_d[4] = {0x08, 0x14, 0x14, 0x1f};
// d
// 	.	.	.	#	
// 	.	.	.	#	
// 	.	#	#	#	
// 	#	.	.	#	
// 	.	#	#	#	
// 	

/*============================================*/
const uint8_t character_e[4] = {0x0c, 0x16, 0x16, 0x16};
// e
// 	.	.	.	.	
// 	.	#	#	#	
// 	#	#	#	#	
// 	#	.	.	.	
// 	.	#	#	#	
// 	

/*============================================*/
const uint8_t character_f[4] = {0x08, 0x1e, 0x09, 0x02};
// f
// 	.	.	#	.	
// 	.	#	.	#	
// 	.	#	.	.	
// 	#	#	#	.	
// 	.	#	.	.	
// 	

/*============================================*/
const uint8_t character_g[4] = {0x12, 0x15, 0x15, 0x1e};
// g
// 	.	#	#	.	
// 	#	.	.	#	
// 	.	#	#	#	
// 	.	.	.	#	
// 	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_h[4] = {0x1f, 0x04, 0x04, 0x18};
// h
// 	#	.	.	.	
// 	#	.	.	.	
// 	#	#	#	.	
// 	#	.	.	#	
// 	#	.	.	#	
// 	

/*============================================*/
const uint8_t character_i[1] = {0x1d};
// i
// 	#	
// 	.	
// 	#	
// 	#	
// 	#	
// 	

/*============================================*/
const uint8_t character_j[2] = {0x10, 0x0d};
// j
// 	.	#	
// 	.	.	
// 	.	#	
// 	.	#	
// 	#	.	
// 	

/*============================================*/
const uint8_t character_k[3] = {0x1f, 0x08, 0x14};
// k
// 	#	.	.	
// 	#	.	.	
// 	#	.	#	
// 	#	#	.	
// 	#	.	#	
// 	

/*============================================*/
const uint8_t character_l[3] = {0x0f, 0x10, 0x08};
// l
// 	#	.	.	
// 	#	.	.	
// 	#	.	.	
// 	#	.	#	
// 	.	#	.	
// 	

/*============================================*/
const uint8_t character_m[5] = {0x1c, 0x04, 0x18, 0x04, 0x18};
// m
// 	.	.	.	.	.	
// 	.	.	.	.	.	
// 	#	#	.	#	.	
// 	#	.	#	.	#	
// 	#	.	#	.	#	
// 	

/*============================================*/
const uint8_t character_n[3] = {0x1c, 0x04, 0x18};
// n
// 	.	.	.	
// 	.	.	.	
// 	#	#	.	
// 	#	.	#	
// 	#	.	#	
// 	

/*============================================*/
const uint8_t character_o[4] = {0x08, 0x14, 0x14, 0x08};
// o
// 	.	.	.	.	
// 	.	.	.	.	
// 	.	#	#	.	
// 	#	.	.	#	
// 	.	#	#	.	
// 	

/*============================================*/
const uint8_t character_p[4] = {0x1c, 0x0a, 0x0a, 0x04};
// p
// 	.	.	.	.	
// 	.	#	#	.	
// 	#	.	.	#	
// 	#	#	#	.	
// 	#	.	.	.	
// 	

/*============================================*/
const uint8_t character_q[4] = {0x04, 0x0a, 0x0a, 0x1c};
// q
// 	.	.	.	.	
// 	.	#	#	.	
// 	#	.	.	#	
// 	.	#	#	#	
// 	.	.	.	#	
// 	

/*============================================*/
const uint8_t character_r[3] = {0x1c, 0x04, 0x04};
// r
// 	.	.	.	
// 	.	.	.	
// 	#	#	#	
// 	#	.	.	
// 	#	.	.	
// 	

/*============================================*/
const uint8_t character_s[3] = {0x12, 0x15, 0x09};
// s
// 	.	#	#	
// 	#	.	.	
// 	.	#	.	
// 	.	.	#	
// 	#	#	.	
// 	

/*============================================*/
const uint8_t character_t[3] = {0x04, 0x0f, 0x14};
// t
// 	.	#	.	
// 	.	#	.	
// 	#	#	#	
// 	.	#	.	
// 	.	.	#	
// 	

/*============================================*/
const uint8_t character_u[3] = {0x0c, 0x10, 0x1c};
// u
// 	.	.	.	
// 	.	.	.	
// 	#	.	#	
// 	#	.	#	
// 	.	#	#	
// 	

/*============================================*/
const uint8_t character_v[3] = {0x0c, 0x10, 0x0c};
// v
// 	.	.	.	
// 	.	.	.	
// 	#	.	#	
// 	#	.	#	
// 	.	#	.	
// 	

/*============================================*/
const uint8_t character_w[5] = {0x0c, 0x10, 0x08, 0x10, 0x0c};
// w
// 	.	.	.	.	.	
// 	.	.	.	.	.	
// 	#	.	.	.	#	
// 	#	.	#	.	#	
// 	.	#	.	#	.	
// 	

/*============================================*/
const uint8_t character_x[3] = {0x14, 0x08, 0x14};
// x
// 	.	.	.	
// 	.	.	.	
// 	#	.	#	
// 	.	#	.	
// 	#	.	#	
// 	

/*============================================*/
const uint8_t character_y[3] = {0x06, 0x18, 0x06};
// y
// 	.	.	.	
// 	#	.	#	
// 	#	.	#	
// 	.	#	.	
// 	.	#	.	
// 	

/*============================================*/
const uint8_t character_z[4] = {0x1a, 0x1a, 0x16, 0x16};
// z
// 	.	.	.	.	
// 	#	#	#	#	
// 	.	.	#	#	
// 	#	#	.	.	
// 	#	#	#	#	
// 	

/*============================================*/
const uint8_t character_bracket_open[3] = {0x04, 0x0e, 0x11};
// {
// 	.	.	#	
// 	.	#	.	
// 	#	#	.	
// 	.	#	.	
// 	.	.	#	
// 	

/*============================================*/
const uint8_t character_vertical_bar[1] = {0x1b};
// |
// 	#	
// 	#	
// 	.	
// 	#	
// 	#	
// 	

/*============================================*/
const uint8_t character_bracket_close[3] = {0x11, 0x0e, 0x04};
// }
// 	#	.	.	
// 	.	#	.	
// 	.	#	#	
// 	.	#	.	
// 	#	.	.	
// 	

/*============================================*/
const uint8_t character_tilde[4] = {0x04, 0x02, 0x04, 0x02};
// ~
// 	.	.	.	.	
// 	.	#	.	#	
// 	#	.	#	.	
// 	.	.	.	.	
// 	.	.	.	.	
// 	

/*============================================*/

const uint8_t* const small5px[95] = {
	character_space,
	character_exclamation,
	character_quotation,
	character_hash,
	character_dollar,
	character_percent,
	character_ampersand,
	character_apostrophe,
	character_parentheses_open,
	character_parentheses_close,
	character_asterisk,
	character_plus,
	character_comma,
	character_minus,
	character_fullstop,
	character_slash,
	character_zero,
	character_one,
	character_two,
	character_three,
	character_four,
	character_five,
	character_six,
	character_seven,
	character_eight,
	character_nine,
	character_colon,
	character_semicolon,
	character_less,
	character_equals,
	character_more,
	character_question,
	character_at,
	character_A,
	character_B,
	character_C,
	character_D,
	character_E,
	character_F,
	character_G,
	character_H,
	character_I,
	character_J,
	character_K,
	character_L,
	character_M,
	character_N,
	character_O,
	character_P,
	character_Q,
	character_R,
	character_S,
	character_T,
	character_U,
	character_V,
	character_W,
	character_X,
	character_Y,
	character_Z,
	character_square_bracket_open,
	character_backslash,
	character_square_bracket_close,
	character_caret,
	character_underscore,
	character_grave,
	character_a,
	character_b,
	character_c,
	character_d,
	character_e,
	character_f,
	character_g,
	character_h,
	character_i,
	character_j,
	character_k,
	character_l,
	character_m,
	character_n,
	character_o,
	character_p,
	character_q,
	character_r,
	character_s,
	character_t,
	character_u,
	character_v,
	character_w,
	character_x,
	character_y,
	character_z,
	character_bracket_open,
	character_vertical_bar,
	character_bracket_close,
	character_tilde
};

const uint8_t small5px_width[95] = {
1,
1,
3,
5,
5,
5,
5,
1,
2,
2,
5,
3,
1,
3,
1,
3,
3,
3,
3,
3,
3,
3,
3,
3,
3,
3,
1,
2,
5,
3,
5,
5,
6,
4,
4,
4,
4,
4,
4,
4,
4,
3,
4,
4,
4,
5,
5,
4,
4,
5,
4,
4,
5,
4,
5,
5,
5,
5,
5,
2,
3,
2,
5,
4,
2,
4,
4,
3,
4,
4,
4,
4,
4,
1,
2,
3,
3,
5,
3,
4,
4,
4,
3,
3,
3,
3,
3,
5,
3,
3,
4,
3,
1,
3,
4
};
#endif /** SMALL5PX_TOPALLIGNED_H_ */

